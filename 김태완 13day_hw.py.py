import turtle as t #거북이 그래픽 모듈 사용
import random      #랜덤 모듈 사용

#다각형을 만드는 함수 정의
def polygon(n,a):        #n:변의 수, a: 변의 길이
    for x in range(n):   #변의 수만큼 반복
        t.fd(a)          #변의 길이 만큼 거북이 전진
        t.left(360/n)    #360도에서 n만큼 나눠 변의 수 정함

#필드와 장애물을 그리는 처음 좌표로 이동하는 함수 정의
def draw(x,y,color):     #x:좌표의 x값, y:좌표의 y값, color:필드 또는 장애물의 색깔 
    t.up()               #좌표로 이동 하기 전 꼬리 올림
    t.goto(x,y)          #좌표로 이동
    t.down()             #필드 또는 장애물을 그리기 위해 꼬리 내림
    t.color(color)       #색깔 지정

    

#배경색
t.bgcolor("black")       #배경을 검은색으로 설정
t.speed(0)               #필드와 장애물을 그리는 시간 최소화


#튕기는 노란 사각형
draw(-50,-200,"yellow")  #draw 함수를 불러내어 좌표와 색깔(노란색) 지정
polygon(4,100)           #polygon 함수를 불러내어 한 변이 100인 사각형 그림

#속도가 더해지는 초록 사각형
draw(100,-50,"green")    #draw 함수를 불러내어 좌표와 색깔(초록색) 지정
polygon(4,100)           #polygon 함수를 불러내어 한 변이 100인 사각형 그림

#원점으로 돌아가는 파란 사각형
draw(-200,-50,"blue")    #draw 함수를 불러내어 좌표와 색깔(파란색) 지정
polygon(4,100)           #polygon 함수를 불러내어 한 변이 100인 사각형 그림

#게임이 끝나는 빨간 사각형
draw(-50,100,"red")      #draw 함수를 불러내어 좌표와 색깔(빨간색) 지정
polygon(4,100)           #polygon 함수를 불러내어 한 변이 100인 사각형 그림

#필드 사각형
t.pensize(2)             #장애물과 구분 짓기 위해 두께를 2로 지정
draw(-250,-250,"white")  #draw 함수를 불러내어 좌표와 색깔(하얀색) 지정
polygon(4,500)           #polygon 함수를 불러내어 한 변이 500인 사각형 그림



#원점 이동(시작)
t.up()                   #거북이를 원점으로 이동 할 때까지 꼬리 올림
t.home()                 #원점을 한 가운데인 (0,0)으로 지정
t.left(random.randint(0,360))  #랜덤 모듈을 이용하여 거북이가 출발할 각도를 랜덤하게 정함



#변에 닿으면 튕김(입사각=반사각)
while True:              #거북이가 계속 돌아다닐 수 있도록 while문의 조건을 '참'으로 지정
    t.fd(1)              #거북이가 1씩 앞으로 이동 할 때 마다
    a = int(t.xcor())    #x좌표를 a변수에 저장
    b = int(t.ycor())    #y좌표를 b변수에 저장
    c = t.heading()      #거북이가 바라보는 각도를 c변수에 저장

    #--------------------필드 사각형 못 벗어나게 하는 코드
    if a >= 250:  #사각형 오른쪽 변(x=250)에 닿거나 넘으면
        t.setheading(180-c)  #거북이가 바라보는 각도(입사각)와 반사각이 같도록 거북이의 머리를 돌려줌

    if a <= -250: #사각형 왼쪽 변(x=-250)에 닿거나 넘으면
        t.setheading(180-c)  #거북이가 바라보는 각도(입사각)와 반사각이 같도록 거북이의 머리를 돌려줌

    if b >= 250:  #사각형 위쪽 변(Y=250)에 닿거나 넘으면
        t.setheading(360-c)  #거북이가 바라보는 각도(입사각)와 반사각이 같도록 거북이의 머리를 돌려줌

    if b <= -250: #사각형 아랫 변(Y=-250)에 닿거나 넘으면
        t.setheading(360-c)  #거북이가 바라보는 각도(입사각)와 반사각이 같도록 거북이의 머리를 돌려줌

    #------------------------튕기는 사각형(노랑)
    if (a == 50) and (-200 <= b <= -100):  #장애물 오른쪽 변의 좌표에 닿으면
        t.setheading(180-c)  #거북이가 바라보는 각도(입사각)와 반사각이 같도록 거북이의 머리를 돌려줌
       
    if (a == -50) and (-200 <= b <= -100): #장애물 왼쪽 변의 좌표에 닿으면
        t.setheading(180-c)  #거북이가 바라보는 각도(입사각)와 반사각이 같도록 거북이의 머리를 돌려줌
        
    if (-50 <= a <= 50) and (b == -100):   #장애물 윗쪽 변의 좌표에 닿으면
        t.setheading(360-c)  #거북이가 바라보는 각도(입사각)와 반사각이 같도록 거북이의 머리를 돌려줌
        
    if (-50 <= a <= 50) and (b == -200):   #장애물 아래쪽 변의 좌표에 닿으면
        t.setheading(360-c)  #거북이가 바라보는 각도(입사각)와 반사각이 같도록 거북이의 머리를 돌려줌

    #------------------------속도가 빨라지는 사각형(초록)
     #거북이가 초록색 장애물 변의 좌표에 닿으면
    if (100<=a<=200 and b==-50) or (100<=a<=200 and b==50) or (a==100 and -50<=b<=50) or (a==200 and -50<=b<=50):
        for i in range(48): #어떤 변에 닿아도 필드를 넘지 않고, 노란색 사각형 안에 들어가지 않도록 48번만큼만 반복
            t.fd(3)         #거북이가 앞으로 3씩 이동하여 빨라지는 것처럼 보이게 만듦(사각형의 사선을 따라 2번 속도가 붙지 않게 함) 

    #------------------------원점으로 돌아가는 사각형(파랑)
     #거북이가 파란색 장애물 변의 좌표에 닿으면
    if (-200<=a<=-100 and b==-50) or (-200<=a<=-100 and b==50) or (a==-200 and -50<=b<=50) or (a==-100 and -50<=b<=50):
        t.home()             #거북이를 원점으로 되돌림
        t.left(random.randint(0,360))      #다시 랜덤모듈을 이용하여 거북이의 머리 각도를 랜덤으로 지정
        
    #------------------------게임이 끝나는 사각형(빨강)
     #거북이가 빨강색 장애물 변의 좌표에 닿으면
    if (-50<=a<=50 and b==100) or (-50<=a<=50 and b==200) or (a==-50 and 100<=b<=200) or (a==50 and 100<=b<=200):
        t.goto(0,-10)       #거북이가 GAME OVER를 나타낼 위치로 이동
        t.write("GAME OVER",False,"center",("",20))  #가운데 정렬로 크기가 20인 "GAME OVER"출력
        t.hideturtle()      #거북이를 없애 줌
        break               #while문을 빠져나가 게임 끝냄
